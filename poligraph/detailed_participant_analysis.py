import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pathlib
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
plt.rcParams['font.family'] = ['Arial Unicode MS', 'Tahoma', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

def analyze_stress_responders():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–≤—à–∏—Ö –Ω–∞ –∏–Ω–¥—É–∫—Ü–∏—é —Å—Ç—Ä–µ—Å—Å–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    results_path = pathlib.Path("poligraph/stress_dynamics_results")
    
    try:
        stress_by_text = pd.read_excel(results_path / 'detailed_stress_by_text.xlsx')
        dynamics_summary = pd.read_excel(results_path / 'stress_dynamics_summary.xlsx')
        
        print("=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í ===\n")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã
        responders = dynamics_summary[dynamics_summary['Responded_to_Induction'] == True]
        non_responders = dynamics_summary[dynamics_summary['Responded_to_Induction'] == False]
        
        print("üìä –†–ï–°–ü–û–ù–î–ï–†–´ (—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–µ—Å—Å):")
        for _, participant in responders.iterrows():
            participant_id = participant['Participant_ID']
            baseline = participant['Baseline_Stress']
            post_induction = participant['Post_Induction_Stress']
            text4_stress = participant['Text4_Stress']
            change_percent = participant['Stress_Change_Percent']
            
            print(f"  ‚Ä¢ {participant_id}: –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è = {baseline:.2f}, –ü–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏ = {post_induction:.2f}")
            print(f"    –°—Ç—Ä–µ—Å—Å –≤ 4-–º —Ç–µ–∫—Å—Ç–µ = {text4_stress:.2f}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ = {change_percent:.1f}%")
        
        print(f"\nüìä –ù–û–ù-–†–ï–°–ü–û–ù–î–ï–†–´ (–Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–µ—Å—Å):")
        for _, participant in non_responders.iterrows():
            participant_id = participant['Participant_ID']
            baseline = participant['Baseline_Stress']
            post_induction = participant['Post_Induction_Stress']
            text4_stress = participant['Text4_Stress']
            change_percent = participant['Stress_Change_Percent']
            
            print(f"  ‚Ä¢ {participant_id}: –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è = {baseline:.2f}, –ü–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏ = {post_induction:.2f}")
            print(f"    –°—Ç—Ä–µ—Å—Å –≤ 4-–º —Ç–µ–∫—Å—Ç–µ = {text4_stress:.2f}, –ò–∑–º–µ–Ω–µ–Ω–∏–µ = {change_percent:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —Ç–µ–∫—Å—Ç–∞–º
        print(f"\n=== –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –ü–û –¢–ï–ö–°–¢–ê–ú ===")
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        responder_ids = responders['Participant_ID'].tolist()
        non_responder_ids = non_responders['Participant_ID'].tolist()
        
        responder_data = stress_by_text[stress_by_text['Participant_ID'].isin(responder_ids)]
        non_responder_data = stress_by_text[stress_by_text['Participant_ID'].isin(non_responder_ids)]
        
        print("\n–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç–∞–º:")
        print("–¢–µ–∫—Å—Ç | –†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã | –ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã | –†–∞–∑–Ω–∏—Ü–∞")
        print("-" * 50)
        
        for text_num in range(1, 7):
            resp_mean = responder_data[responder_data['Text_Number'] == text_num]['Stress_Score'].mean()
            non_resp_mean = non_responder_data[non_responder_data['Text_Number'] == text_num]['Stress_Score'].mean()
            diff = resp_mean - non_resp_mean
            
            print(f"  {text_num}   |    {resp_mean:.2f}     |      {non_resp_mean:.2f}      |  {diff:.2f}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        create_detailed_visualizations(stress_by_text, responders, non_responders, results_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—ã—Ö —è—Ä–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        analyze_extreme_cases(stress_by_text, responders, non_responders)
        
        return responders, non_responders
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

def create_detailed_visualizations(stress_by_text, responders, non_responders, results_path):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤ –∏ –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤
    plt.figure(figsize=(14, 10))
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø
    responder_ids = responders['Participant_ID'].tolist()
    non_responder_ids = non_responders['Participant_ID'].tolist()
    
    responder_data = stress_by_text[stress_by_text['Participant_ID'].isin(responder_ids)]
    non_responder_data = stress_by_text[stress_by_text['Participant_ID'].isin(non_responder_ids)]
    
    # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
    resp_means = responder_data.groupby('Text_Number')['Stress_Score'].agg(['mean', 'std'])
    non_resp_means = non_responder_data.groupby('Text_Number')['Stress_Score'].agg(['mean', 'std'])
    
    # –†–∏—Å—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    plt.plot(resp_means.index, resp_means['mean'], 'ro-', linewidth=3, markersize=8, 
             label=f'–†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã (n={len(responders)})', color='red')
    plt.fill_between(resp_means.index, 
                    resp_means['mean'] - resp_means['std'],
                    resp_means['mean'] + resp_means['std'],
                    alpha=0.3, color='red')
    
    plt.plot(non_resp_means.index, non_resp_means['mean'], 'bo-', linewidth=3, markersize=8, 
             label=f'–ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã (n={len(non_responders)})', color='blue')
    plt.fill_between(non_resp_means.index, 
                    non_resp_means['mean'] - non_resp_means['std'],
                    non_resp_means['mean'] + non_resp_means['std'],
                    alpha=0.3, color='blue')
    
    # –û—Ç–º–µ—á–∞–µ–º –º–æ–º–µ–Ω—Ç –∏–Ω–¥—É–∫—Ü–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞
    plt.axvline(x=3.5, color='black', linestyle='--', linewidth=2, alpha=0.7)
    plt.text(3.6, plt.ylim()[1]*0.9, '–ò–Ω–¥—É–∫—Ü–∏—è\n—Å—Ç—Ä–µ—Å—Å–∞', fontsize=12, fontweight='bold')
    
    # –í—ã–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã
    plt.axvspan(0.5, 3.5, alpha=0.2, color='gray', label='–ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è')
    plt.axvspan(3.5, 6.5, alpha=0.2, color='orange', label='–ü–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏')
    
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Å—Ç—Ä–µ—Å—Å–∞: —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã vs –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã', fontsize=16, fontweight='bold')
    plt.xlabel('–ù–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞', fontsize=12)
    plt.ylabel('–°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–µ—Å—Å–∞', fontsize=12)
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xticks(range(1, 7))
    plt.tight_layout()
    plt.savefig(results_path / 'responders_vs_non_responders.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ 4-–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
    plt.figure(figsize=(12, 8))
    
    text4_responders = responder_data[responder_data['Text_Number'] == 4]['Stress_Score']
    text4_non_responders = non_responder_data[non_responder_data['Text_Number'] == 4]['Stress_Score']
    
    # Box plot –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    data_for_boxplot = [text4_responders, text4_non_responders]
    labels = ['–†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã', '–ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã']
    
    plt.boxplot(data_for_boxplot, labels=labels, patch_artist=True,
                boxprops=dict(facecolor='lightblue', alpha=0.7),
                medianprops=dict(color='red', linewidth=2))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    for i, data in enumerate(data_for_boxplot):
        y = data
        x = np.random.normal(i+1, 0.04, size=len(y))
        plt.scatter(x, y, alpha=0.7, s=50)
    
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –≤ 4-–º —Ç–µ–∫—Å—Ç–µ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏', fontsize=16, fontweight='bold')
    plt.ylabel('–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–µ—Å—Å–∞ –≤ 4-–º —Ç–µ–∫—Å—Ç–µ', fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(results_path / 'text4_comparison_groups.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–∞–º—ã—Ö —è—Ä–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
    plt.figure(figsize=(15, 10))
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ 3 —Å–∞–º—ã—Ö —è—Ä–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    top_responders = responders.nlargest(3, 'Stress_Change')['Participant_ID'].tolist()
    top_non_responders = non_responders.nsmallest(3, 'Stress_Change')['Participant_ID'].tolist()
    
    plt.subplot(2, 1, 1)
    for participant in top_responders:
        participant_data = stress_by_text[stress_by_text['Participant_ID'] == participant]
        plt.plot(participant_data['Text_Number'], participant_data['Stress_Score'], 
                'o-', linewidth=2, markersize=6, label=participant)
    
    plt.axvline(x=3.5, color='black', linestyle='--', alpha=0.7)
    plt.title('–¢–û–ü-3 —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–∞ (–Ω–∞–∏–±–æ–ª—å—à–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞)', fontsize=14, fontweight='bold')
    plt.xlabel('–ù–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞')
    plt.ylabel('–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–µ—Å—Å–∞')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xticks(range(1, 7))
    
    plt.subplot(2, 1, 2)
    for participant in top_non_responders:
        participant_data = stress_by_text[stress_by_text['Participant_ID'] == participant]
        plt.plot(participant_data['Text_Number'], participant_data['Stress_Score'], 
                'o-', linewidth=2, markersize=6, label=participant)
    
    plt.axvline(x=3.5, color='black', linestyle='--', alpha=0.7)
    plt.title('–¢–û–ü-3 –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–∞ (–Ω–∞–∏–±–æ–ª—å—à–µ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞)', fontsize=14, fontweight='bold')
    plt.xlabel('–ù–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞')
    plt.ylabel('–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–µ—Å—Å–∞')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xticks(range(1, 7))
    
    plt.tight_layout()
    plt.savefig(results_path / 'individual_extreme_profiles.png', dpi=300, bbox_inches='tight')
    plt.show()

def analyze_extreme_cases(stress_by_text, responders, non_responders):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–º—ã—Ö —è—Ä–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã"""
    
    print("\n=== –ê–ù–ê–õ–ò–ó –Ø–†–ö–ò–• –°–õ–£–ß–ê–ï–í ===")
    
    # –°–∞–º—ã–π —è—Ä–∫–∏–π —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä
    top_responder = responders.loc[responders['Stress_Change'].idxmax()]
    print(f"\nüî• –°–ê–ú–´–ô –Ø–†–ö–ò–ô –†–ï–°–ü–û–ù–î–ï–†: {top_responder['Participant_ID']}")
    print(f"   –ü—Ä–∏—Ä–æ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞: {top_responder['Stress_Change']:.2f} ({top_responder['Stress_Change_Percent']:.1f}%)")
    print(f"   –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è: {top_responder['Baseline_Stress']:.2f}")
    print(f"   –ü–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏: {top_responder['Post_Induction_Stress']:.2f}")
    print(f"   –°—Ç—Ä–µ—Å—Å –≤ 4-–º —Ç–µ–∫—Å—Ç–µ: {top_responder['Text4_Stress']:.2f}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–∫—Å—Ç–∞–º –¥–ª—è —Å–∞–º–æ–≥–æ —è—Ä–∫–æ–≥–æ —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–∞
    top_resp_profile = stress_by_text[stress_by_text['Participant_ID'] == top_responder['Participant_ID']]
    print("   –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–∫—Å—Ç–∞–º:")
    for _, row in top_resp_profile.iterrows():
        text_num = int(row['Text_Number'])
        stress_score = row['Stress_Score']
        phase = "–ë–∞–∑–æ–≤–∞—è" if text_num <= 3 else "–°—Ç—Ä–µ—Å—Å"
        print(f"     –¢–µ–∫—Å—Ç {text_num} ({phase}): {stress_score:.2f}")
    
    # –°–∞–º—ã–π —è—Ä–∫–∏–π –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä
    top_non_responder = non_responders.loc[non_responders['Stress_Change'].idxmin()]
    print(f"\n‚ùÑÔ∏è –°–ê–ú–´–ô –Ø–†–ö–ò–ô –ù–û–ù-–†–ï–°–ü–û–ù–î–ï–†: {top_non_responder['Participant_ID']}")
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞: {top_non_responder['Stress_Change']:.2f} ({top_non_responder['Stress_Change_Percent']:.1f}%)")
    print(f"   –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è: {top_non_responder['Baseline_Stress']:.2f}")
    print(f"   –ü–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏: {top_non_responder['Post_Induction_Stress']:.2f}")
    print(f"   –°—Ç—Ä–µ—Å—Å –≤ 4-–º —Ç–µ–∫—Å—Ç–µ: {top_non_responder['Text4_Stress']:.2f}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–∫—Å—Ç–∞–º –¥–ª—è —Å–∞–º–æ–≥–æ —è—Ä–∫–æ–≥–æ –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–∞
    top_non_resp_profile = stress_by_text[stress_by_text['Participant_ID'] == top_non_responder['Participant_ID']]
    print("   –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–∫—Å—Ç–∞–º:")
    for _, row in top_non_resp_profile.iterrows():
        text_num = int(row['Text_Number'])
        stress_score = row['Stress_Score']
        phase = "–ë–∞–∑–æ–≤–∞—è" if text_num <= 3 else "–°—Ç—Ä–µ—Å—Å"
        print(f"     –¢–µ–∫—Å—Ç {text_num} ({phase}): {stress_score:.2f}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
    print(f"\n=== –ì–†–£–ü–ü–û–í–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ===")
    print(f"–†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã:")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞: {responders['Stress_Change'].mean():.2f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è: {responders['Baseline_Stress'].mean():.2f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏: {responders['Post_Induction_Stress'].mean():.2f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å –≤ 4-–º —Ç–µ–∫—Å—Ç–µ: {responders['Text4_Stress'].mean():.2f}")
    
    print(f"\n–ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã:")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞: {non_responders['Stress_Change'].mean():.2f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è: {non_responders['Baseline_Stress'].mean():.2f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏: {non_responders['Post_Induction_Stress'].mean():.2f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å –≤ 4-–º —Ç–µ–∫—Å—Ç–µ: {non_responders['Text4_Stress'].mean():.2f}")

def create_summary_report(responders, non_responders):
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    
    results_path = pathlib.Path("poligraph/stress_dynamics_results")
    
    print(f"\n" + "="*60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–• –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê")
    print("="*60)
    
    print(f"\nüìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    total_participants = len(responders) + len(non_responders)
    responder_percentage = len(responders) / total_participants * 100
    
    print(f"‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}")
    print(f"‚Ä¢ –†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã (—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–µ—Å—Å): {len(responders)} ({responder_percentage:.1f}%)")
    print(f"‚Ä¢ –ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã (–Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏): {len(non_responders)} ({100-responder_percentage:.1f}%)")
    
    print(f"\nüéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ò–ù–î–£–ö–¶–ò–ò –°–¢–†–ï–°–°–ê:")
    if responder_percentage >= 50:
        effectiveness = "–í–´–°–û–ö–ê–Ø"
    elif responder_percentage >= 30:
        effectiveness = "–°–†–ï–î–ù–Ø–Ø"
    else:
        effectiveness = "–ù–ò–ó–ö–ê–Ø"
    
    print(f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {effectiveness}")
    print(f"‚Ä¢ {responder_percentage:.1f}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑–∞–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏")
    
    print(f"\nüìà –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞ —É —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤: {responders['Stress_Change'].mean():.2f}")
    print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞: {responders['Stress_Change'].max():.2f}")
    print(f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–∏—Ä–æ—Å—Ç–æ–º: {responders.loc[responders['Stress_Change'].idxmax()]['Participant_ID']}")
    
    if len(non_responders) > 0:
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤: {non_responders['Stress_Change'].mean():.2f}")
        print(f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–Ω–∏–∂–µ–Ω–∏–µ–º: {non_responders.loc[non_responders['Stress_Change'].idxmin()]['Participant_ID']}")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if responder_percentage < 50:
        print("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–Ω–¥—É–∫—Ü–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞")
        print("‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    print("‚Ä¢ –ò–∑—É—á–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å—É")
    print("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    report_data = {
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
            '–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            '–†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã',
            '–ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã',
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–¥—É–∫—Ü–∏–∏ (%)',
            '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —É —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤',
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç',
            '–õ—É—á—à–∏–π —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä'
        ],
        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
            total_participants,
            len(responders),
            len(non_responders),
            f"{responder_percentage:.1f}%",
            f"{responders['Stress_Change'].mean():.2f}",
            f"{responders['Stress_Change'].max():.2f}",
            responders.loc[responders['Stress_Change'].idxmax()]['Participant_ID']
        ]
    }
    
    report_df = pd.DataFrame(report_data)
    report_df.to_excel(results_path / 'final_experiment_report.xlsx', index=False)
    
    print(f"\nüìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {results_path}/final_experiment_report.xlsx")

if __name__ == "__main__":
    responders, non_responders = analyze_stress_responders()
    if responders is not None and non_responders is not None:
        create_summary_report(responders, non_responders) 