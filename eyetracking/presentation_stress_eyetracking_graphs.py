#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏—è—Ö –º–µ–∂–¥—É 
—É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–µ—Å—Å, –∏ —Ç–µ–º–∏, –∫—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª.
–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏ –æ—Ç—á–µ—Ç–æ–≤.

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
- 4 —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è (p < 0.05)
- 3 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pathlib
import warnings
import scipy.stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
plt.rcParams['font.family'] = ['Arial Unicode MS', 'Tahoma', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['figure.dpi'] = 300
plt.rcParams['savefig.dpi'] = 300
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'
plt.style.use('default')

# –ü–æ–¥–∞–≤–ª—è–µ–º warnings
warnings.filterwarnings('ignore')


class PresentationEyetrackingGraphs:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ"""
    
    def __init__(self, eyetracking_data_path="eyetracking/by_person/data/trial.xls"):
        self.eyetracking_data_path = pathlib.Path(eyetracking_data_path)
        self.results_dir = pathlib.Path("eyetracking/presentation_results")
        self.results_dir.mkdir(exist_ok=True)
        
        # –¢–û–ü-4 –ó–ù–ê–ß–ò–ú–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø (p < 0.05)
        self.significant_measures = {
            'AVERAGE_BLINK_DURATION': {
                'title': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ—Ä–≥–∞–Ω–∏—è',
                'ylabel': '–í—Ä–µ–º—è (–º—Å)',
                'description': '–ü—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ—Ä–≥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ/–∫–æ—Ä–æ—á–µ',
                'change': -38.8,
                'effect_size': -0.891,
                'p_value': 0.0160,
                'rank': 1
            },
            'AVERAGE_FIXATION_DURATION': {
                'title': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏',
                'ylabel': '–í—Ä–µ–º—è (–º—Å)',
                'description': '–ü—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–µ–ª–∞—é—Ç –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏',
                'change': -7.0,
                'effect_size': -0.795,
                'p_value': 0.0138,
                'rank': 2
            },
            'FIXATIONS_PER_SECOND': {
                'title': '–ß–∞—Å—Ç–æ—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–π',
                'ylabel': '–§–∏–∫—Å–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É',
                'description': '–ü—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ –≤–∑–≥–ª—è–¥ –¥–≤–∏–∂–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ',
                'change': +7.2,
                'effect_size': 0.754,
                'p_value': 0.0191,
                'rank': 3
            },
            'SACCADES_PER_SECOND': {
                'title': '–ß–∞—Å—Ç–æ—Ç–∞ —Å–∞–∫–∫–∞–¥',
                'ylabel': '–°–∞–∫–∫–∞–¥ –≤ —Å–µ–∫—É–Ω–¥—É',
                'description': '–ü—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏–π –≥–ª–∞–∑',
                'change': +7.2,
                'effect_size': 0.752,
                'p_value': 0.0193,
                'rank': 4
            }
        }
        
        # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ (–±–ª–∏–∑–∫–∏–µ –∫ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏)
        self.trending_measures = {
            'PUPIL_SIZE_MEAN': {
                'title': '–†–∞–∑–º–µ—Ä –∑—Ä–∞—á–∫–∞',
                'ylabel': '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
                'description': '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑—Ä–∞—á–∫–æ–≤ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ',
                'change': +14.5,
                'effect_size': 0.473,
                'p_value': 0.1332,
            },
            'TEXT_COVERAGE_PERCENT': {
                'title': '–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞',
                'ylabel': '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (%)',
                'description': '–ë–æ–ª—å—à–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ',
                'change': +4.9,
                'effect_size': 0.355,
                'p_value': 0.15,
            },
            'BLINK_COUNT': {
                'title': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ—Ä–≥–∞–Ω–∏–π',
                'ylabel': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                'description': '–ú–µ–Ω—å—à–µ –º–æ—Ä–≥–∞–Ω–∏–π –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ',
                'change': -24.7,
                'effect_size': -0.311,
                'p_value': 0.20,
            }
        }
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–µ—Å—Å–∞
        self.stress_responders = {
            '1707LTA': '–°–∞–º–∞—è —è—Ä–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è (+31.8%)',
            '1807KNV': '–†–µ–∑–∫–∏–π –ø–∏–∫ –≤ 4-–º —Ç–µ–∫—Å—Ç–µ (+150%)',
            '1607KYA': '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è',
            '1807OVA': '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è',
            '1807ZUG': '–°–ª–∞–±–∞—è —Ä–µ–∞–∫—Ü–∏—è',
            '1807SAV': '–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—Ç—Ä–µ—Å—Å',
            '1807KAN': '–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—Ç—Ä–µ—Å—Å',
        }
        
        self.stress_non_responders = {
            '1707KAV': '–°–∏–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ (-60%)',
            '1807HEE': '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (-66.7%)',
            '1807CAA': '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (-26.1%)',
            '1607LVA': '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (0%)',
            '1907ZSI': '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (0%)',
            '1707DMA': '–õ–µ–≥–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (-10%)',
            '1707SAA': '–õ–µ–≥–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (-9.1%)',
        }
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.colors = {
            'responders': '#E74C3C',        # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤
            'non_responders': '#3498DB',    # –°–∏–Ω–∏–π –¥–ª—è –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤
            'baseline': '#95A5A6',          # –°–µ—Ä—ã–π –¥–ª—è –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
            'stress_phase': '#F39C12',      # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–π —Ñ–∞–∑—ã
            'significant': '#27AE60',       # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            'trending': '#9B59B6'           # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
        }
        
        print(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
        print(f"   ‚Ä¢ –ó–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {len(self.significant_measures)}")
        print(f"   ‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏: {len(self.trending_measures)}")
        print(f"   ‚Ä¢ –†–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤: {len(self.stress_responders)}")
        print(f"   ‚Ä¢ –ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤: {len(self.stress_non_responders)}")
    
    def load_and_prepare_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞"""
        print("\nüìÇ –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•...")
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
        data = pd.read_csv(self.eyetracking_data_path, sep="\t", encoding="utf-16", header=0)
        data = data.iloc[1:].reset_index(drop=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        numeric_columns = [
            'AVERAGE_BLINK_DURATION', 'BLINK_COUNT', 'AVERAGE_FIXATION_DURATION',
            'MEDIAN_FIXATION_DURATION', 'SD_FIXATION_DURATION', 'FIXATION_DURATION_MAX',
            'FIXATION_DURATION_MIN', 'FIXATION_COUNT', 'AVERAGE_SACCADE_AMPLITUDE',
            'MEDIAN_SACCADE_AMPLITUDE', 'SD_SACCADE_AMPLITUDE', 'SACCADE_COUNT',
            'DURATION', 'PUPIL_SIZE_MAX', 'PUPIL_SIZE_MEAN', 'PUPIL_SIZE_MIN',
            'VISITED_INTEREST_AREA_COUNT', 'IA_COUNT', 'RUN_COUNT', 'SAMPLE_COUNT'
        ]
        
        for col in numeric_columns:
            if col in data.columns:
                data[col] = pd.to_numeric(
                    data[col].astype(str).str.replace(",", "."), errors="coerce"
                )
        
        data['INDEX'] = pd.to_numeric(data['INDEX'], errors='coerce')
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        data['FIXATIONS_PER_SECOND'] = data['FIXATION_COUNT'] / (data['DURATION'] / 1000)
        data['SACCADES_PER_SECOND'] = data['SACCADE_COUNT'] / (data['DURATION'] / 1000)
        data['TEXT_COVERAGE_PERCENT'] = (data['VISITED_INTEREST_AREA_COUNT'] / data['IA_COUNT']) * 100
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—Ç—Ä–µ—Å—Å–∞
        def classify_participant(row):
            participant_id = row['RECORDING_SESSION_LABEL']
            text_index = row['INDEX']
            
            if participant_id in self.stress_responders:
                return 'stress_responders' if text_index >= 4 else 'baseline_responders'
            elif participant_id in self.stress_non_responders:
                return 'stress_non_responders' if text_index >= 4 else 'baseline_non_responders'
            else:
                return 'unknown'
        
        data['stress_group'] = data.apply(classify_participant, axis=1)
        
        print(f"   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['RECORDING_SESSION_LABEL'].nunique()}")
        print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å—Ç—Ä–µ—Å—Å–∞:")
        for group, count in data['stress_group'].value_counts().items():
            print(f"     - {group}: {count}")
        
        return data
    
    def create_top_measures_comparison(self, data):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¢–û–ü-4 –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        print("\nüèÜ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¢–û–ü-4 –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...")
        
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        axes = axes.flatten()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–π —Ñ–∞–∑—ã (—Ç–µ–∫—Å—Ç—ã 4-6)
        stress_data = data[data['INDEX'] >= 4]
        
        for i, (measure, info) in enumerate(self.significant_measures.items()):
            ax = axes[i]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            responders_data = stress_data[
                stress_data['stress_group'] == 'stress_responders'
            ][measure].dropna()
            
            non_responders_data = stress_data[
                stress_data['stress_group'] == 'stress_non_responders'
            ][measure].dropna()
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π boxplot
            bp = ax.boxplot([non_responders_data, responders_data], 
                          labels=['–ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã', '–†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã'],
                          patch_artist=True,
                          boxprops=dict(linewidth=2),
                          whiskerprops=dict(linewidth=2),
                          capprops=dict(linewidth=2),
                          medianprops=dict(linewidth=3, color='white'))
            
            # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –±–æ–∫—Å—ã
            bp['boxes'][0].set_facecolor(self.colors['non_responders'])
            bp['boxes'][0].set_alpha(0.8)
            bp['boxes'][1].set_facecolor(self.colors['responders'])
            bp['boxes'][1].set_alpha(0.8)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
            rank_text = f"ü•á ‚Ññ{info['rank']}\n{info['change']:+.1f}%"
            
            ax.text(0.02, 0.98, rank_text, 
                   transform=ax.transAxes, 
                   verticalalignment='top',
                   bbox=dict(boxstyle='round,pad=0.5', 
                           facecolor=self.colors['significant'], 
                           alpha=0.8),
                   fontsize=12, color='white', fontweight='bold')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            ax.set_title(f"{info['title']}", fontsize=14, fontweight='bold', pad=20)
            ax.set_ylabel(info['ylabel'], fontsize=12)
            ax.grid(True, alpha=0.3)
            ax.set_facecolor('#FAFAFA')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            ax.text(0.5, -0.15, info['description'], 
                   transform=ax.transAxes, ha='center',
                   fontsize=10, style='italic',
                   bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
        
        plt.suptitle('üèÜ –¢–û–ü-4 –ó–ù–ê–ß–ò–ú–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø –ê–ô–¢–†–ï–ö–ò–ù–ì–ê –ü–†–ò –°–¢–†–ï–°–°–ï', 
                     fontsize=18, fontweight='bold', y=0.98)
        plt.tight_layout()
        plt.subplots_adjust(top=0.92, bottom=0.15)
        plt.savefig(self.results_dir / 'top_4_significant_measures.png', 
                   dpi=300, bbox_inches='tight', facecolor='white')
        plt.show()
    
    def create_effect_sizes_chart(self, data):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        all_measures = {**self.significant_measures, **self.trending_measures}
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        measures_names = []
        effect_sizes = []
        p_values = []
        categories = []
        
        for measure, info in all_measures.items():
            measures_names.append(info['title'])
            effect_sizes.append(info['effect_size'])
            p_values.append(info['p_value'])
            if measure in self.significant_measures:
                categories.append('–ó–Ω–∞—á–∏–º—ã–µ (p < 0.05)')
            else:
                categories.append('–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ (p > 0.05)')
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(1, 1, figsize=(14, 8))
        
        # –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        colors = [self.colors['significant'] if cat == '–ó–Ω–∞—á–∏–º—ã–µ (p < 0.05)' 
                 else self.colors['trending'] for cat in categories]
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π bar chart
        bars = ax.barh(measures_names, effect_sizes, color=colors, alpha=0.8, height=0.6)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (bar, effect) in enumerate(zip(bars, effect_sizes)):
            width = bar.get_width()
            ax.text(width + (0.05 if width >= 0 else -0.05), bar.get_y() + bar.get_height()/2,
                   f'{effect:.2f}',
                   ha='left' if width >= 0 else 'right', va='center',
                   fontweight='bold', fontsize=11,
                   bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.9))
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
        ax.axvline(x=0.2, color='gray', linestyle='--', alpha=0.5)
        ax.axvline(x=0.5, color='gray', linestyle='--', alpha=0.7)
        ax.axvline(x=0.8, color='gray', linestyle='--', alpha=0.9)
        ax.axvline(x=-0.2, color='gray', linestyle='--', alpha=0.5)
        ax.axvline(x=-0.5, color='gray', linestyle='--', alpha=0.7)
        ax.axvline(x=-0.8, color='gray', linestyle='--', alpha=0.9)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        ax.text(0.2, len(measures_names), '–º–∞–ª—ã–π', ha='center', va='bottom', alpha=0.7)
        ax.text(0.5, len(measures_names), '—Å—Ä–µ–¥–Ω–∏–π', ha='center', va='bottom', alpha=0.7)
        ax.text(0.8, len(measures_names), '–±–æ–ª—å—à–æ–π', ha='center', va='bottom', alpha=0.7)
        
        ax.set_xlabel('–†–∞–∑–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ (Cohen\'s d)', fontsize=14, fontweight='bold')
        ax.set_title('üìè –†–ê–ó–ú–ï–†–´ –≠–§–§–ï–ö–¢–û–í –ü–û –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú –ê–ô–¢–†–ï–ö–ò–ù–ì–ê', 
                    fontsize=16, fontweight='bold', pad=20)
        
        # –õ–µ–≥–µ–Ω–¥–∞
        from matplotlib.patches import Patch
        legend_elements = [
            Patch(facecolor=self.colors['significant'], alpha=0.8, label='–ó–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è (p < 0.05)'),
            Patch(facecolor=self.colors['trending'], alpha=0.8, label='–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ (p > 0.05)')
        ]
        ax.legend(handles=legend_elements, loc='lower right', fontsize=12)
        
        ax.grid(axis='x', alpha=0.3)
        ax.set_facecolor('#FAFAFA')
        
        plt.tight_layout()
        plt.savefig(self.results_dir / 'effect_sizes_chart.png', 
                   dpi=300, bbox_inches='tight', facecolor='white')
        plt.show()
    
    def create_dynamics_timeline(self, data):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç–∞–º –¥–ª—è –¢–û–ü-2 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏...")
        
        fig, axes = plt.subplots(1, 2, figsize=(16, 6))
        
        # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (—É–±–∏—Ä–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ—Ä–≥–∞–Ω–∏—è)
        all_measures = list(self.significant_measures.items())
        top_measures = [all_measures[1], all_measures[2]]  # AVERAGE_FIXATION_DURATION –∏ FIXATIONS_PER_SECOND
        
        for i, (measure, info) in enumerate(top_measures):
            ax = axes[i]
            
            # –†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã
            responder_data = data[data['RECORDING_SESSION_LABEL'].isin(self.stress_responders.keys())]
            responder_means = responder_data.groupby('INDEX')[measure].mean()
            responder_stds = responder_data.groupby('INDEX')[measure].std()
            responder_counts = responder_data.groupby('INDEX')[measure].count()
            responder_sems = responder_stds / np.sqrt(responder_counts)
            
            # –ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã
            non_responder_data = data[data['RECORDING_SESSION_LABEL'].isin(self.stress_non_responders.keys())]
            non_responder_means = non_responder_data.groupby('INDEX')[measure].mean()
            non_responder_stds = non_responder_data.groupby('INDEX')[measure].std()
            non_responder_counts = non_responder_data.groupby('INDEX')[measure].count()
            non_responder_sems = non_responder_stds / np.sqrt(non_responder_counts)
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤
            texts = sorted(responder_means.index)
            ax.plot(texts, [responder_means[t] for t in texts], 
                   'o-', color=self.colors['responders'], linewidth=4, 
                   markersize=10, markerfacecolor='white', markeredgewidth=2,
                   label='–†–µ—Å–ø–æ–Ω–¥–µ—Ä—ã (—Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å)')
            ax.fill_between(texts, 
                           [responder_means[t] - responder_sems[t] for t in texts],
                           [responder_means[t] + responder_sems[t] for t in texts],
                           alpha=0.2, color=self.colors['responders'])
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –Ω–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤
            ax.plot(texts, [non_responder_means[t] for t in texts], 
                   's-', color=self.colors['non_responders'], linewidth=4, 
                   markersize=10, markerfacecolor='white', markeredgewidth=2,
                   label='–ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä—ã (–Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏)')
            ax.fill_between(texts, 
                           [non_responder_means[t] - non_responder_sems[t] for t in texts],
                           [non_responder_means[t] + non_responder_sems[t] for t in texts],
                           alpha=0.2, color=self.colors['non_responders'])
            
            # –§–æ–Ω–æ–≤—ã–µ –∑–æ–Ω—ã
            ax.axvspan(-0.5, 3.5, alpha=0.1, color='green', label='–ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è')
            ax.axvspan(3.5, 6.5, alpha=0.1, color='red', label='–°—Ç—Ä–µ—Å—Å–æ–≤–∞—è —Ñ–∞–∑–∞')
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            ax.axvline(x=3.5, color='black', linestyle='--', linewidth=2, alpha=0.8)
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
            y_range = ax.get_ylim()
            ax.annotate('–ò–ù–î–£–ö–¶–ò–Ø –°–¢–†–ï–°–°–ê', xy=(3.5, y_range[1] * 0.9), 
                       xytext=(4.5, y_range[1] * 0.9),
                       arrowprops=dict(arrowstyle='->', color='black', lw=2),
                       fontsize=12, fontweight='bold', ha='center')
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ
            info_text = f"‚Ññ{info['rank']}\n{info['change']:+.1f}%"
            
            ax.text(0.02, 0.98, info_text, 
                   transform=ax.transAxes, 
                   verticalalignment='top',
                   bbox=dict(boxstyle='round,pad=0.5', 
                           facecolor=self.colors['significant'], 
                           alpha=0.9),
                   fontsize=12, color='white', fontweight='bold')
            
            ax.set_title(f"{info['title']}", fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel("–ù–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞", fontsize=14)
            ax.set_ylabel(info['ylabel'], fontsize=14)
            ax.grid(True, alpha=0.3)
            ax.set_facecolor('#FAFAFA')
            ax.set_xticks(texts)
            ax.legend(loc='upper right' if i == 0 else 'lower right', fontsize=10)
        
        plt.suptitle('üìà –í–†–ï–ú–ï–ù–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô', 
                     fontsize=18, fontweight='bold')
        plt.tight_layout()
        plt.savefig(self.results_dir / 'key_dynamics_timeline.png', 
                   dpi=300, bbox_inches='tight', facecolor='white')
        plt.show()
    
    def create_summary_infographic(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏...")
        
        fig = plt.figure(figsize=(16, 12))
        gs = fig.add_gridspec(4, 4, hspace=0.3, wspace=0.3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_ax = fig.add_subplot(gs[0, :])
        title_ax.text(0.5, 0.5, 'üëÅÔ∏è –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´: –°–¢–†–ï–°–° –ò –ê–ô–¢–†–ï–ö–ò–ù–ì', 
                     ha='center', va='center', fontsize=24, fontweight='bold',
                     transform=title_ax.transAxes)
        title_ax.axis('off')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_ax = fig.add_subplot(gs[1, 0])
        stats_text = ("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
                     f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: 16\n"
                     f"‚Ä¢ –ó–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π: 4 (25%)\n"
                     f"‚Ä¢ –†–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤: {len(self.stress_responders)}\n"
                     f"‚Ä¢ –ù–æ–Ω-—Ä–µ—Å–ø–æ–Ω–¥–µ—Ä–æ–≤: {len(self.stress_non_responders)}")
        
        stats_ax.text(0.1, 0.9, stats_text, ha='left', va='top', 
                     transform=stats_ax.transAxes, fontsize=12,
                     bbox=dict(boxstyle='round,pad=0.5', facecolor=self.colors['significant'], alpha=0.8),
                     color='white', fontweight='bold')
        stats_ax.axis('off')
        
        # –¢–û–ü –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –º–æ—Ä–≥–∞–Ω–∏—è)
        top1_ax = fig.add_subplot(gs[1, 1])
        top1_measure = list(self.significant_measures.items())[1]  # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        top1_text = (f"ü•á –õ–ò–î–ï–†\n\n"
                    f"{top1_measure[1]['title']}\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {top1_measure[1]['change']:+.1f}%\n"
                    f"–í—ã—Å–æ–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å")
        
        top1_ax.text(0.1, 0.9, top1_text, ha='left', va='top',
                    transform=top1_ax.transAxes, fontsize=12,
                    bbox=dict(boxstyle='round,pad=0.5', facecolor=self.colors['responders'], alpha=0.8),
                    color='white', fontweight='bold')
        top1_ax.axis('off')
        
        # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
        trend_ax = fig.add_subplot(gs[1, 2])
        trend_text = ("ü§î –¢–ï–ù–î–ï–ù–¶–ò–ò\n\n"
                     "‚Ä¢ –ó—Ä–∞—á–∫–∏ —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è (+14.5%)\n"
                     "‚Ä¢ –ë–æ–ª—å—à–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ (+4.9%)\n"
                     "‚Ä¢ –ú–µ–Ω—å—à–µ –º–æ—Ä–≥–∞–Ω–∏–π (-24.7%)")
        
        trend_ax.text(0.1, 0.9, trend_text, ha='left', va='top',
                     transform=trend_ax.transAxes, fontsize=12,
                     bbox=dict(boxstyle='round,pad=0.5', facecolor=self.colors['trending'], alpha=0.8),
                     color='white', fontweight='bold')
        trend_ax.axis('off')
        
        # –í—ã–≤–æ–¥—ã
        conclusion_ax = fig.add_subplot(gs[1, 3])
        conclusion_text = ("üí° –í–´–í–û–î\n\n"
                          "–ê–π—Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç\n"
                          "–û–ì–†–ê–ù–ò–ß–ï–ù–ù–£–Æ\n"
                          "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è\n"
                          "–¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞")
        
        conclusion_ax.text(0.1, 0.9, conclusion_text, ha='left', va='top',
                          transform=conclusion_ax.transAxes, fontsize=12,
                          bbox=dict(boxstyle='round,pad=0.5', facecolor='orange', alpha=0.8),
                          color='white', fontweight='bold')
        conclusion_ax.axis('off')
        
        # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        effects_ax = fig.add_subplot(gs[2:, :2])
        
        measures = [info['title'] for info in self.significant_measures.values()]
        effects = [info['effect_size'] for info in self.significant_measures.values()]
        colors_list = [self.colors['responders'] if e > 0 else self.colors['non_responders'] for e in effects]
        
        bars = effects_ax.barh(measures, effects, color=colors_list, alpha=0.8)
        
        for bar, effect in zip(bars, effects):
            width = bar.get_width()
            effects_ax.text(width + (0.02 if width >= 0 else -0.02), 
                          bar.get_y() + bar.get_height()/2,
                          f'{effect:.2f}', ha='left' if width >= 0 else 'right', 
                          va='center', fontweight='bold', fontsize=10)
        
        effects_ax.set_xlabel('–†–∞–∑–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ (Cohen\'s d)', fontsize=12, fontweight='bold')
        effects_ax.set_title('üìè –†–∞–∑–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π', 
                           fontsize=14, fontweight='bold')
        effects_ax.axvline(x=0, color='black', linewidth=1)
        effects_ax.grid(axis='x', alpha=0.3)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations_ax = fig.add_subplot(gs[2:, 2:])
        rec_text = ("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–ê–ö–¢–ò–ö–ò:\n\n"
                   "1. –§–æ–∫—É—Å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö:\n"
                   "   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ—Ä–≥–∞–Ω–∏–π ‚¨áÔ∏è\n"
                   "   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–π ‚¨áÔ∏è\n"
                   "   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏–π –≥–ª–∞–∑ ‚¨ÜÔ∏è\n\n"
                   "2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n\n"
                   "3. –£—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è\n\n"
                   "4. –°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–µ—Å—Å–∞")
        
        recommendations_ax.text(0.05, 0.95, rec_text, ha='left', va='top',
                              transform=recommendations_ax.transAxes, fontsize=11,
                              bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgray', alpha=0.8))
        recommendations_ax.axis('off')
        
        plt.savefig(self.results_dir / 'summary_infographic.png', 
                   dpi=300, bbox_inches='tight', facecolor='white')
        plt.show()
    
    def generate_presentation_summary(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –î–õ–Ø –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò:")
        print("=" * 60)
        
        print("üèÜ –¢–û–ü-4 –ó–ù–ê–ß–ò–ú–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø:")
        for i, (measure, info) in enumerate(self.significant_measures.items(), 1):
            effect_size_desc = ("–ë–û–õ–¨–®–û–ô" if abs(info['effect_size']) >= 0.8 else 
                              "—Å—Ä–µ–¥–Ω–∏–π" if abs(info['effect_size']) >= 0.5 else "–º–∞–ª—ã–π")
            
            print(f"   {i}. {info['title']} ({measure})")
            print(f"      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {info['change']:+.1f}%")
            print(f"      ‚Ä¢ –†–∞–∑–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞: {effect_size_desc}")
            print(f"      ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ ‚úÖ")
            print(f"      ‚Ä¢ {info['description']}")
            print()
        
        print("ü§î –ò–ù–¢–ï–†–ï–°–ù–´–ï –¢–ï–ù–î–ï–ù–¶–ò–ò:")
        for measure, info in self.trending_measures.items():
            print(f"   ‚Ä¢ {info['title']}: {info['change']:+.1f}%")
            print(f"     {info['description']}")
        
        print("\nüí° –ì–õ–ê–í–ù–´–ô –í–´–í–û–î:")
        print("   –ê–π—Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –û–ì–†–ê–ù–ò–ß–ï–ù–ù–£–Æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞.")
        print("   –¢–æ–ª—å–∫–æ 25% –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (4 –∏–∑ 16) —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è.")
        print("   –ù–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã –í–†–ï–ú–ï–ù–ù–´–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏–π –≥–ª–∞–∑.")
        
        print("\nüéØ –î–õ–Ø –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï:")
        print("   1. top_4_significant_measures.png - –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫")
        print("   2. effect_sizes_chart.png - —Ä–∞–∑–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤") 
        print("   3. key_dynamics_timeline.png - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
        print("   4. summary_infographic.png - –∏—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞")
        
        print("=" * 60)
    
    def run_presentation_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        print("üé® –°–û–ó–î–ê–ù–ò–ï –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–û–ù–ù–´–• –ì–†–ê–§–ò–ö–û–í: –ê–ô–¢–†–ï–ö–ò–ù–ì –ò –°–¢–†–ï–°–°")
        print("=" * 70)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.load_and_prepare_data()
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        self.create_top_measures_comparison(data)
        self.create_effect_sizes_chart(data)
        self.create_dynamics_timeline(data)
        self.create_summary_infographic()
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        self.generate_presentation_summary()
        
        print(f"\n‚úÖ –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–û–ù–ù–´–ï –ì–†–ê–§–ò–ö–ò –°–û–ó–î–ê–ù–´!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.results_dir}")
        print(f"üé® –°–æ–∑–¥–∞–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: 4")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {len(self.significant_measures)}")
        
        return data


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –°–û–ó–î–ê–ù–ò–ï –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–û–ù–ù–´–• –ì–†–ê–§–ò–ö–û–í: –ó–ù–ê–ß–ò–ú–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ê–ô–¢–†–ï–ö–ò–ù–ì–ê")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤
    generator = PresentationEyetrackingGraphs()
    data = generator.run_presentation_analysis()
    
    return data


if __name__ == "__main__":
    main() 